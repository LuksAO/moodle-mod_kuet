{"version":3,"file":"database.min.js","sources":["../src/database.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n// Project implemented by the \"Recovery, Transformation and Resilience Plan.\n// Funded by the European Union - Next GenerationEU\".\n//\n// Produced by the UNIMOODLE University Group: Universities of\n// Valladolid, Complutense de Madrid, UPV/EHU, León, Salamanca,\n// Illes Balears, Valencia, Rey Juan Carlos, La Laguna, Zaragoza, Málaga,\n// Córdoba, Extremadura, Vigo, Las Palmas de Gran Canaria y Burgos\n\n/**\n *\n * @module    mod_jqshow/database\n * @copyright  2023 Proyecto UNIMOODLE\n * @author     UNIMOODLE Group (Coordinator) <direccion.area.estrategia.digital@uva.es>\n * @author     3IPUNT <contacte@tresipunt.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nlet indexedDb = null;\nlet dbName;\nlet dbVersion = 1;\n\n/**\n * @constructor\n * @param {int} sid\n * @param {int} userid\n */\nfunction Db(sid, userid) {\n    dbName = `${sid}_${userid}`;\n    this.openDb();\n}\n\nDb.prototype.openDb = function() {\n    let req = indexedDB.open(dbName, dbVersion);\n    req.onsuccess = function(evt) {\n        indexedDb = evt.target.result;\n    };\n    req.onerror = function(event) {\n        // eslint-disable-next-line no-console\n        console.error(`Database error: ${event.target.errorCode}`);\n    };\n    req.onupgradeneeded = function(evt) {\n        // We create the database with the necessary objects and indexes.\n        let questions = evt.currentTarget.result.createObjectStore(\n            'questions', {keyPath: 'jqid'});\n        questions.createIndex('jqid', 'jqid', {unique: true});\n\n        let statequestions = evt.currentTarget.result.createObjectStore('statequestions', {keyPath: 'state'});\n        statequestions.createIndex('state', 'state', {unique: true});\n    };\n};\n\nDb.prototype.add = function(storeName, value) {\n    let store = this.getObjectStore(storeName, 'readwrite');\n    store.add(value);\n};\n\nDb.prototype.update = function(storeName, value) {\n    let store = this.getObjectStore(storeName, 'readwrite');\n    store.put(value);\n};\n\nDb.prototype.get = function(storeName, id) {\n    let store = this.getObjectStore(storeName, 'readonly');\n    return store.get(id);\n};\n\nDb.prototype.delete = function(storeName, id) {\n    let store = this.getObjectStore(storeName, 'readwrite');\n    store.delete(id);\n};\n\nDb.prototype.getObjectStore = function(storeName, mode) {\n    let tx = indexedDb.transaction(storeName, mode);\n    return tx.objectStore(storeName);\n};\n\nDb.prototype.clearObjectStore = function(storeName) {\n    let store = this.getObjectStore(storeName, 'readwrite');\n    let req = store.clear();\n    req.onsuccess = function() {\n        // eslint-disable-next-line no-console\n        console.log(\"clearObjectStore\");\n    };\n    req.onerror = function(evt) {\n        // eslint-disable-next-line no-console\n        console.error(\"clearObjectStore:\", evt.target.errorCode);\n    };\n};\n\nDb.prototype.deleteDatabase = function() {\n    indexedDb.close();\n    return window.indexedDB.deleteDatabase(dbName);\n};\n\nexport const initDb = (sid, userid) => {\n    return new Db(sid, userid);\n};\n\nexport default {\n    initDb\n};\n"],"names":["Object","defineProperty","_exports","value","initDb","default","dbName","indexedDb","Db","sid","userid","concat","this","openDb","prototype","req","indexedDB","open","onsuccess","evt","target","result","onerror","event","console","error","errorCode","onupgradeneeded","currentTarget","createObjectStore","keyPath","createIndex","unique","add","storeName","getObjectStore","update","put","get","id","delete","mode","transaction","objectStore","clearObjectStore","clear","log","deleteDatabase","close","window","_default"],"mappings":"6DAgCaA,OAAAC,eAAAC,SAAA,aAAA,CAAAC,OAAA,IAAAD,SAAAE,OAAAF,SAAAG,aAAA,EAEb,IACIC,OADAC,UAAY,KAShB,SAASC,GAAGC,IAAKC,QACbJ,OAAM,GAAAK,OAAMF,SAAGE,OAAID,QACnBE,KAAKC,QACT,CAEAL,GAAGM,UAAUD,OAAS,WAClB,IAAIE,IAAMC,UAAUC,KAAKX,OAbb,GAcZS,IAAIG,UAAY,SAASC,KACrBZ,UAAYY,IAAIC,OAAOC,QAE3BN,IAAIO,QAAU,SAASC,OAEnBC,QAAQC,MAAK,mBAAAd,OAAoBY,MAAMH,OAAOM,aAElDX,IAAIY,gBAAkB,SAASR,KAEXA,IAAIS,cAAcP,OAAOQ,kBACrC,YAAa,CAACC,QAAS,SACjBC,YAAY,OAAQ,OAAQ,CAACC,QAAQ,IAE1Bb,IAAIS,cAAcP,OAAOQ,kBAAkB,iBAAkB,CAACC,QAAS,UAC7EC,YAAY,QAAS,QAAS,CAACC,QAAQ,MAI9DxB,GAAGM,UAAUmB,IAAM,SAASC,UAAW/B,OACvBS,KAAKuB,eAAeD,UAAW,aACrCD,IAAI9B,QAGdK,GAAGM,UAAUsB,OAAS,SAASF,UAAW/B,OAC1BS,KAAKuB,eAAeD,UAAW,aACrCG,IAAIlC,QAGdK,GAAGM,UAAUwB,IAAM,SAASJ,UAAWK,IAEnC,OADY3B,KAAKuB,eAAeD,UAAW,YAC9BI,IAAIC,KAGrB/B,GAAGM,UAAU0B,OAAS,SAASN,UAAWK,IAC1B3B,KAAKuB,eAAeD,UAAW,aACrCM,OAAOD,KAGjB/B,GAAGM,UAAUqB,eAAiB,SAASD,UAAWO,MAE9C,OADSlC,UAAUmC,YAAYR,UAAWO,MAChCE,YAAYT,YAG1B1B,GAAGM,UAAU8B,iBAAmB,SAASV,WACrC,IACInB,IADQH,KAAKuB,eAAeD,UAAW,aAC3BW,QAChB9B,IAAIG,UAAY,WAEZM,QAAQsB,IAAI,qBAEhB/B,IAAIO,QAAU,SAASH,KAEnBK,QAAQC,MAAM,oBAAqBN,IAAIC,OAAOM,aAItDlB,GAAGM,UAAUiC,eAAiB,WAE1B,OADAxC,UAAUyC,QACHC,OAAOjC,UAAU+B,eAAezC,SAGpC,IAAMF,OAAS,SAACK,IAAKC,QACxB,OAAO,IAAIF,GAAGC,IAAKC,SACrBR,SAAAE,OAAAA,OAAA,IAAA8C,SAEa,CACX9C,OAAAA,QACH,OAAAF,SAAAG,QAAA6C,SAAAhD,SAAAG,OAAA"}